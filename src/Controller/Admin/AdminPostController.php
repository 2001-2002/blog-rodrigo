<?php

namespace App\Controller\Admin;

use App\Entity\Post;
use App\Form\PostType;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
/**
 * @Route("/admin/posts")
 */
class AdminPostController extends AbstractController
{
    /**
     * @Route("/", name="admin_post")
     */
    public function index()
    {
        $user = $this->getUser();
        if(in_array('ROLE_AUTHOR', $user->getRoles())){
            $posts = $user->getPostCollection();
        }else{

            $posts = $this->getDoctrine()
                          ->getRepository(Post::class)
                          ->findAll();
        }
        return $this->render('Admin/posts/index.html.twig',[
            'posts' => $posts
        ]);
    }

    /**
     * @Route("/new", name="admin_post_new")
     */
    public function new(Request $resquest)
    {
        $form = $this->createForm(PostType::class);
        $form->handleRequest($resquest);

        if ($form->isSubmitted() && $form->isValid()){
            $post = $form->getData();
            $file = $post->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            $file->move(
                $this->getParameter('image_directory'),
                $fileName
            );

            $post->setImage($fileName);
            $post->setCreatedAt(new \DateTime("now", new \DateTimeZone("America/Sao_Paulo")));
            $post->setUpdatedAt(new \DateTime("now", new \DateTimeZone("America/Sao_Paulo")));
            $post->setAuthor($this->getUser());
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($post);
            $entityManager->flush();

            $this->addFlash('success', "Post salvo com sucesso!");
            return $this->redirectToRoute('admin_post');
        }

        return $this->render('Admin/posts/new.html.twig',[
            'form' => $form->createView()
        ]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/{id}", name="admin_post_show", methods={"GET"})
     */
    public function show(Post $post): Response
    {
        return $this->render('Admin/posts/show.html.twig', [
            'post' => $post,
        ]);
    }

    /**
     * @Route("/update/{id}", name="admin_post_update")
     */
    public function update(Request $request, Post $id){

        $image = $id->getImage();
        $form = $this->createForm(PostType::class, $id);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()){
            $post = $form->getData();

            $file = $form['image']->getData();

            if($file){

                $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

                $file->move(
                    $this->getParameter('image_directory'),
                    $fileName
                );

                $post->setImage($fileName);

            }else{

                $post->setImage($image);

            }
            $post->setUpdatedAt(new \DateTime("now", new \DateTimeZone("America/Sao_Paulo")));
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->merge($post);
            $entityManager->flush();

            $this->addFlash('success', "Post atualizado com sucesso!");
            return $this->redirectToRoute('admin_post');
        }
        return $this->render('Admin/posts/update.html.twig',[
            'form' => $form->createView(),
            'post' => $id
        ]);
    }

    /**
     * @Route("/delete/{id}", name="admin_post_delete")
     * @Security("has_role('ROLE_ADMIN')")
     */
    public function delete(Post $post){
        $post->setUpdatedAt(new \DateTime("now", new \DateTimeZone("America/Sao_Paulo")));
        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove($post);
        $entityManager->flush();

        $this->addFlash('success', "Post removido com sucesso!");
        return $this->redirectToRoute('admin_post');
    }
}
